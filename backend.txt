src(Folder)
----------------------------------------------------------------------------

#Models
------------
Import mongoose from “mongoose”;
Import bcrypt from “bcrypt”;
Import jwt from “jsonwebtoken”;
Import env from “dotenv”; 	

Const userSchema = new mongoose.schema( 
{ 
    name:{
    type:String,
    required:[true ,”pls enter name”]
    },
   email:{
    type:String,
    Required:[true,”pls enter mail”]
   }
},{timeserie:”true”} 
)  

userSchema.pre("save", async function (next) {
  if (!this.isModified("password")) return next();
  this.password = await bcrypt.hash(this.password, 10);
  // console.log("2");
  next();
});

userSchema.methods.isPasswordCorrect = async function (password) {
  return bcrypt.compare(password, this.password);
};

userSchema.methods.generateAccessToken =  function () {
const token = jwt.sign(
    {
      _id: this._id,
      email: this.email,
      phone: this.phone,
    },
    process.env.ACCESS_TOKEN_SECRET,
    {
      expiresIn: process.env.EXPIRY_TOKEN,
    }
  );
  // console.log(token);
  return token;
};

export const User = mongoose.model("User", userSchema);

---------------------------------------------------------
controllers
---------------------------------------------------------
import { User } from "../models/Registration.js";

export const registration = async (req, res,next) => {
    try{
        const { name, email, password } = req.body;
        const user = await User.findOne({ email });

        if(user){

        return res
        .status(400)
        .json({ message: "User is alerady exit", success: false });

        }
        
        if (!name || !email || !password) {
      return res.status(400).json({ error: "Details are required" });
        } 
        const registrationData = await User.create({
          name,
          email,
          password,
           });
        const token = registrationData.generateAccessToken();

        res.status(201).json({
        message: "Signup Successfully",
        success: true,
       });  

    }
    catch{
         res.status(500).json({ error: error.message });
    }
}
-------------
cosnt export login = async (req , res) =>{
  try{
      const {email,password} = req.body; 
      const user = await User.findOne({ email });
      if (!user) {
      return res
        .status(403)
        .json({ message: "Email or Password is wrong", success: false });
      }
       const isMatch = await user.isPasswordCorrect(password);
       const token = await user.generateAccessToken();
       if (!isMatch) {
      return res
        .status(403)
        .json({ message: "Email or Password is wrong", success: false });
    }

    res.status(201).json({
      email,
      token,
      message: "login Successfully",
      name: user.name,

      success: true,
    }):
  }catch{
      res.status(500).json({ error: error.message });
  }
}

middlewares  
---------------------------------------------------------------

routes
-------------------------------------------
registrationRoute.js
-----------------------
import express from "express";
import { login, registration } from "../controllers/registrationController.js";
import { signupValidation } from "../middlewares/AuthValidation.js";

const router = express.Router();

router.post("/registration", signupValidation, registration);
router.post("/login", login);
export default router;
-----------

-------------------------------------------------------
app.js
---------------------------------------------
import express from "express";
import env from "dotenv";
import registrationRoutes from "./routes/registrationRoutes.js";

const app = express()
dotenv.config();
app.get("/" , (req,res) = >{
     console.log("hi");
     res.send("hi");
})
app.use("/api", registrationRoutes);
const port = process.env.PORT || 3000;
app.listen(port , ( )=>{
    console.log(`server is running on port ${port}`); 
})






-------------------------------------------------
.env(outside src folder)
------------------------------------------------
MONGODB_URL =mongodb://localhost:27017/Database name
const PORT = 8000;
const ACCESS_TOKEN_SECRET =83939233jsq;
const EXPIRY_TOKEN = 5d;
---------------------------------------------


#frontend
---------------------------------------------------------------
